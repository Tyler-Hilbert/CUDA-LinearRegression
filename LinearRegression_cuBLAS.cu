// %%writefile LinearRegression_cuBLAS.cu

// Linear Regression implemented from scratch, but using cuBLAS for sum and dot product
// reference (python) -- https://www.geeksforgeeks.org/linear-regression-python-implementation/


#include <stdio.h>
#include <cuda_runtime.h>
#include <cublas_v2.h>


#define N 1024 // Size of dataset
#define TRAIN_SIZE 820 // Number of points to use for training
#define TEST_SIZE 204 // Number of points to use for testing


#define CUDA_CHECK(ans) { gpuAssert((ans), __FILE__, __LINE__); }
inline void gpuAssert(cudaError_t code, const char *file, int line, bool abort=true)
{
   if (code != cudaSuccess) 
   {
      fprintf(stderr,"GPUassert: %s %s %d\n", cudaGetErrorString(code), file, line);
      if (abort) exit(code);
   }
}

// Macro for cuBLAS error checking
#define CUBLAS_CHECK(ans) { \
    if ((ans) != CUBLAS_STATUS_SUCCESS) { \
        fprintf(stderr, "cuBLAS Error: %s %s %d\n", cublasGetErrorString(ans), __FILE__, __LINE__); \
        exit(ans); \
    } \
}

// Inline function to map cublasStatus_t to string within the macro
inline const char* cublasGetErrorString(cublasStatus_t status) {
    switch (status) {
        case CUBLAS_STATUS_SUCCESS:          return "CUBLAS_STATUS_SUCCESS";
        case CUBLAS_STATUS_NOT_INITIALIZED:  return "CUBLAS_STATUS_NOT_INITIALIZED";
        case CUBLAS_STATUS_ALLOC_FAILED:     return "CUBLAS_STATUS_ALLOC_FAILED";
        case CUBLAS_STATUS_INVALID_VALUE:    return "CUBLAS_STATUS_INVALID_VALUE";
        case CUBLAS_STATUS_ARCH_MISMATCH:    return "CUBLAS_STATUS_ARCH_MISMATCH";
        case CUBLAS_STATUS_MAPPING_ERROR:    return "CUBLAS_STATUS_MAPPING_ERROR";
        case CUBLAS_STATUS_EXECUTION_FAILED: return "CUBLAS_STATUS_EXECUTION_FAILED";
        case CUBLAS_STATUS_INTERNAL_ERROR:   return "CUBLAS_STATUS_INTERNAL_ERROR";
        case CUBLAS_STATUS_NOT_SUPPORTED:    return "CUBLAS_STATUS_NOT_SUPPORTED";
        case CUBLAS_STATUS_LICENSE_ERROR:    return "CUBLAS_STATUS_LICENSE_ERROR";
        default:                             return "UNKNOWN_CUBLAS_STATUS";
    }
}



int main() {
      // Dataset
      float h_x[N] = {};
      float h_y[N] = { 56552, 74575, 1444, 18719, 68145, 36923, 5003, 32876, 54678, 36577, 38200, 100697, 41849, 53921, 90413, 11177, 101025, 26675, 42542, 80496, 19746, 56118, 55698, 39626, 74502, 37424, 62277, 67045, 79781, 3917, 4348, 29719, 20899, 68222, 12794, 19451, 19476, 93726, 21375, 58048, 63646, 53350, 91917, 87974, 81527, 58195, 81778, 8023, 11647, 97474, 62247, 1618, 78374, 80474, 13102, 66917, 31580, 67673, 45003, 84299, 98597, 37168, 53293, 85378, 38704, 48077, 99399, 100922, 98072, 58093, 82094, 61924, 95681, 66582, 6327, 101657, 27929, 46701, 60707, 27099, 12754, 55057, 68123, 28643, 45650, 79063, 68181, 80220, 36746, 15678, 70150, 47922, 87709, 26273, 68223, 101978, 52731, 66701, 26099, 61476, 40299, 70481, 45377, 9899, 3793, 51854, 2798, 83930, 79651, 32421, 51623, 9315, 74079, 38509, 2379, 31293, 75147, 71346, 35674, 69031, 14454, 51053, 21201, 86660, 29821, 46653, 4826, 94757, 24657, 68660, 39972, 64156, 100977, 96301, 60016, 53296, 24076, 69983, 48602, 46849, 18071, 40076, 68543, 24282, 58426, 546, 92425, 32519, 26982, 56346, 26478, 6318, 42793, 90921, 74446, 10039, 99355, 83968, 7652, 31572, 60024, 18701, 8450, 48842, 1481, 91273, 36751, 23526, 3248, 78821, 69445, 79255, 39675, 4823, 77744, 38521, 22373, 94021, 28502, 46647, 55175, 18503, 33562, 82179, 42919, 92150, 4340, 76218, 34353, 7568, 24102, 6976, 20454, 11297, 98001, 17002, 75227, 82846, 64377, 102378, 31425, 18357, 68923, 95178, 39683, 68241, 76475, 18245, 27899, 81830, 65674, 84370, 52880, 32346, 88175, 85643, 92454, 66331, 85992, 80496, 69277, 93729, 64673, 91179, 92730, 93201, 33033, 72450, 17756, 58725, 63146, 35628, 61403, 64379, 17927, 76644, 92321, 95494, 73969, 81698, 18022, 13679, 77528, 66916, 81019, 21257, 37510, 90020, 8718, 85225, 87075, 98171, 83641, 99921, 25348, 3338, 79921, 90671, 3836, 90835, 90821, 38670, 63570, 54103, 92839, 94320, 41897, 27447, 81322, 52874, 70148, 57999, 71172, 53359, 43952, 37748, 83178, 90500, 69936, 31569, 23296, 853, 38377, 89627, 68275, 38693, 83700, 50578, 32919, 3919, 15247, 56469, 37773, 9379, 49027, 32464, 71867, 1399, 45029, 55247, 33257, 67426, 19047, 51047, 55427, 9907, 21879, 100501, 45594, 101669, 3132, 97675, 5807, 34656, 71949, 6619, 42222, 100417, 59721, 17349, 25274, 83967, 47879, 83856, 18147, 99028, 1718, 53249, 15795, 33399, 13075, 87220, 57679, 37874, 31666, 68490, 40796, 93594, 4043, 70802, 5453, 26522, 56800, 3920, 19025, 29550, 35032, 81298, 40630, 6573, 7490, 75342, 48627, 77868, 16432, 28167, 20825, 52820, 81018, 72176, 89609, 24472, 25427, 51518, 62424, 20050, 93022, 89853, 95153, 96582, 66951, 7144, 68174, 96125, 79100, 8703, 2771, 76506, 28826, 84765, 80999, 91803, 92442, 87995, 78725, 59949, 56580, 82518, 66701, 27894, 8171, 47958, 3693, 60875, 18218, 100349, 1326, 56020, 20430, 53397, 86526, 96695, 1803, 79779, 850, 79373, 57268, 71117, 47563, 8225, 78003, 74900, 72672, 81703, 99627, 46794, 33974, 73751, 14665, 51942, 7746, 38681, 40223, 35206, 101551, 71675, 51545, 41376, 51592, 86380, 68204, 16749, 10075, 56798, 63307, 104, 51305, 75423, 12021, 2306, 32401, 87900, 73050, 91930, 86545, 35770, 93271, 7553, 27219, 53371, 25974, 10789, 48147, 88821, 67728, 18899, 58753, 42524, 96949, 61198, 34247, 44776, 27373, 53778, 15020, 556, 24061, 2653, 57858, 65751, 98176, 20229, 63382, 935, 71294, 41839, 43477, 50477, 48503, 77051, 33480, 53074, 61572, 57393, 5218, 98336, 72631, 2150, 978, 24217, 76051, 31773, 47058, 49129, 31328, 38655, 41651, 16877, 15777, 99723, 14995, 95554, 3169, 83377, 21129, 66097, 4150, 2481, 51579, 26848, 43479, 81876, 8574, 51303, 61248, 27976, 74690, 4372, 27895, 4528, 55998, 75019, 6522, 20474, 101850, 27424, 55484, 8088, 33794, 14504, 64646, 22949, 28451, 49420, 93798, 99750, 77728, 17021, 31302, 5173, 49171, 42329, 12721, 15446, 45072, 67301, 81940, 26126, 15068, 67121, 92226, 34264, 60077, 39051, 23731, 44420, 20544, 93997, 94053, 38117, 97952, 91744, 87077, 83779, 65078, 8924, 92374, 38855, 58204, 59180, 97896, 15334, 49859, 9810, 98703, 82146, 28167, 40897, 51298, 100053, 7900, 83585, 94648, 75049, 66318, 73077, 69620, 24748, 18973, 15082, 47022, 6845, 81022, 31219, 5628, 13865, 30611, 58568, 35171, 51076, 26160, 55768, 84354, 46267, 11311, 63529, 70679, 53156, 49073, 84356, 53856, 3671, 69898, 27454, 10822, 46939, 26226, 85510, 66172, 72522, 60873, 101346, 62673, 7877, 93199, 78474, 78395, 17458, 45677, 59983, 4030, 5273, 101051, 55871, 13102, 21544, 44572, 42486, 72477, 12228, 65493, 84701, 39251, 49077, 97075, 57068, 45605, 90032, 8900, 39874, 40327, 32475, 7004, 100777, 99676, 22747, 11467, 77495, 65567, 68679, 34422, 55224, 36129, 29639, 25158, 18778, 64075, 60897, 29196, 54745, 78911, 98796, 6704, 10682, 97701, 75331, 74305, 22456, 65869, 3810, 94178, 95995, 35175, 97074, 30023, 82946, 81236, 4554, 7201, 75046, 46401, 4371, 32133, 97535, 84154, 4026, 67531, 32798, 5497, 34650, 7075, 78829, 73449, 53122, 28222, 54597, 33155, 91123, 2399, 79444, 15280, 25726, 49731, 46625, 45945, 63832, 101553, 25856, 46507, 4528, 101840, 44144, 43846, 46612, 20274, 68648, 63074, 98304, 66486, 41301, 33827, 40327, 91802, 80404, 8026, 25181, 36948, 18309, 91770, 91672, 46107, 102129, 35816, 11784, 36618, 29951, 22698, 87923, 21296, 61026, 13851, 91076, 98724, 84323, 51751, 4852, 97403, 6966, 80613, 3532, 48808, 84369, 93493, 87274, 71651, 88448, 46497, 13122, 60619, 17547, 40226, 13154, 11877, 93620, 81619, 1250, 85857, 72857, 55501, 97799, 43330, 24475, 26143, 88096, 65452, 21728, 80590, 80025, 82914, 83068, 83954, 36424, 48651, 99689, 17804, 42273, 23948, 41675, 80029, 73351, 1019, 63062, 10689, 17072, 62152, 33601, 48731, 22447, 44370, 50504, 61572, 87772, 82737, 53070, 99850, 61372, 90168, 16031, 79852, 90744, 68583, 67930, 22869, 17442, 1722, 75001, 11076, 26976, 17814, 92226, 76624, 8642, 7075, 80851, 95683, 59174, 44563, 75642, 67823, 84183, 62347, 93026, 38442, 54139, 27153, 30477, 50726, 76570, 50772, 87945, 59097, 22074, 32645, 70524, 28744, 63754, 25224, 26472, 40895, 58627, 36448, 80466, 58579, 99753, 90026, 66800, 44025, 67751, 60552, 93650, 83098, 2903, 60774, 69202, 49374, 829, 3249, 44351, 28351, 7097, 11842, 42468, 63999, 85921, 36748, 40833, 27155, 64948, 44278, 13608, 5569, 50996, 78425, 25553, 1276, 93154, 60405, 95431, 50878, 58270, 35666, 78932, 63745, 16105, 96096, 16959, 62497, 71040, 99672, 71925, 63390, 21026, 38348, 43599, 29598, 15404, 66921, 57578, 12473, 39219, 50073, 1729, 44224, 45556, 8870, 99008, 98404, 81702, 24713, 61106, 85229, 93427, 2037, 77645, 19420, 46739, 16402, 81678, 24743, 48598, 71253, 22651, 56329, 101226, 55629, 52657, 2449, 30109, 62248, 83939, 29479, 88171, 14836, 60851, 102422, 64570, 16812, 93250, 38826, 1873, 67617, 16156, 24550, 85271, 95749, 69247, 33978, 35719, 35028, 91805, 76871, 14532, 53066, 52270, 98222, 56029, 95738, 30400, 43503, 26219, 472, 8975, 20670, 33545, 2304, 15604, 94697, 5851, 25917, 5155, 102023, 11291, 93597, 21171, 65675, 90430, 48598, 29703, 89646, 25588, 29543, 8553, 46884, 58941, 99727, 65669, 21923, 77622, 66198, 33169, 31847, 33252, 66850, 4110, 58981, 76725, 50947, 93095, 82536, 38554, 46426, 84697, 58700, 72164 };

      // GPU Data
      float *d_x, *d_y;
      CUDA_CHECK( cudaMalloc(&d_x, N * sizeof(float)) );
      CUDA_CHECK( cudaMalloc(&d_y, N * sizeof(float)) );
      CUDA_CHECK( cudaMemcpy(d_x, h_x, N * sizeof(float), cudaMemcpyHostToDevice) );
      CUDA_CHECK( cudaMemcpy(d_y, h_y, N * sizeof(float), cudaMemcpyHostToDevice) );

      // Calculate means of x and y using cuBLAS
      cublasHandle_t handle;
      CUBLAS_CHECK( cublasCreate(&handle) );
      float x_sum, y_sum;
      CUBLAS_CHECK( cublasSasum(handle, TRAIN_SIZE, d_x, 1, &x_sum) );
      CUBLAS_CHECK( cublasSasum(handle, TRAIN_SIZE, d_y, 1, &y_sum) );
      float x_mean = x_sum / TRAIN_SIZE;
      float y_mean = y_sum / TRAIN_SIZE;

      // Calculate xy and xx dot products using cuBLAS
      float xy_sum = 0, xx_sum = 0;
      CUBLAS_CHECK( cublasSdot(handle, TRAIN_SIZE, d_x, 1, d_y, 1, &xy_sum) );
      CUBLAS_CHECK( cublasSdot(handle, TRAIN_SIZE, d_x, 1, d_x, 1, &xx_sum) );

      // Compute slope (b1) and intercept (b0) on host
      float nxy = TRAIN_SIZE * x_mean * y_mean;
      float nxx = TRAIN_SIZE * x_mean * x_mean;
      float slope = (xy_sum - nxy) / (xx_sum - nxx);
      float intercept = y_mean - slope * x_mean;

      // Print slope and intercept
      printf ("Slope: %f\n", slope);
      printf ("Intercept: %f\n", intercept);



      // Make predictions for test set
      // GPU Data
      float h_predictions[TEST_SIZE];
      float *d_predictions;
      float *d_x_test = d_x+TRAIN_SIZE; // Pointer to where test data starts
      CUDA_CHECK( cudaMalloc(&d_predictions, TEST_SIZE*sizeof(float)) );
      for (int i = 0; i < TEST_SIZE; i++) {
        h_predictions[i] = intercept;
      }
      CUDA_CHECK( cudaMemcpy(d_predictions, &h_predictions, TEST_SIZE * sizeof(float), cudaMemcpyHostToDevice) );

      // Compute y = mx + b using cuBLAS
      CUBLAS_CHECK( cublasSaxpy(handle, TEST_SIZE, &slope, d_x_test, 1, d_predictions, 1) );

      // Copy data back to host and print
      CUDA_CHECK( cudaMemcpy(&h_predictions, d_predictions, TEST_SIZE * sizeof(float), cudaMemcpyDeviceToHost));
      printf ("Predictions (first 10)\n");
      for (int i = 0; i < 10; i++) {
          printf ("%f: %f\n", h_x[TRAIN_SIZE+i], h_predictions[i]);
      }


      // Calculate MSE
      // Calculate the difference on cuBLAS. Note: This is destructive as it will modify the d_predictions values
      float alpha = -1.0f; // To subtract
      float *d_y_train = d_y + TRAIN_SIZE; // Pointer to where test data starts
      // Diff calculation on cuBLAS
      CUBLAS_CHECK( cublasSaxpy(handle, TEST_SIZE, &alpha, d_y_train, 1, d_predictions, 1));
      // Calculate sum of the squares on cuBLAS
      float squared_error_sum = 0;
      CUBLAS_CHECK( cublasSdot(handle, TEST_SIZE, d_predictions, 1, d_predictions, 1, &squared_error_sum) );
      // Mean
      float mse = squared_error_sum / TEST_SIZE;

      // Print MSE
      printf("Mean Squared Error: %f\n", mse);



      // Clean up
      CUDA_CHECK( cudaFree(d_x) );
      CUDA_CHECK( cudaFree(d_y) );
      CUDA_CHECK( cudaFree(d_predictions) );
      CUBLAS_CHECK( cublasDestroy(handle) );

      return 0;
}
